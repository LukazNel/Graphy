cmake_minimum_required(VERSION 3.5)

project(REII_211_Practical_2 LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# QtCreator supports the following variables for Android, which are identical to qmake Android variables.
# Check http://doc.qt.io/qt-5/deployment-android.html for more information.
# They need to be set before the find_package(Qt5 ...) call.

#if(ANDROID)
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
#    if (ANDROID_ABI STREQUAL "armeabi-v7a")
#        set(ANDROID_EXTRA_LIBS
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libcrypto.so
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libssl.so)
#    endif()
#endif()

find_package(Qt5 COMPONENTS Core Quick REQUIRED)

#set(QML_IMPORT_PATH "qml/")
#set(QML qml/main.qml qml/vertex.qml qml/edge.qml)
set(QML_IMPORT_NAME "custom")
set(QML_IMPORT_MAJOR_VERSION 1)
set(HEADERS include/adjacencymatrix.h include/adjacencymatrixq.h)
set(SOURCES src/main.cpp src/adjacencymatrix.cpp src/adjacencymatrixq.cpp)

qt5_add_resources(RESOURCES qml.qrc)

if(ANDROID)
    add_library(REII_211_Practical_2 SHARED
      main.cpp
      qml.qrc
    )
else()
    add_executable(REII_211_Practical_2
      ${SOURCES} ${HEADERS} ${RESOURCES}
    )
endif()

target_compile_definitions(REII_211_Practical_2
  PRIVATE $<$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>:QT_QML_DEBUG>)
target_link_libraries(REII_211_Practical_2
  PRIVATE Qt5::Core Qt5::Quick)
